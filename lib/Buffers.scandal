// Appends silence to and audio buffer.
lambda appendSilence = int zeros -> array start -> {
	int samples = size(start) + zeros
	array buffer = new(samples)
	int i = 0
	while i < size(start) {
		buffer[i] = start[i]
		i = i + 1
	}
	return buffer
}

// Reads from a file and appends to an audio buffer.
lambda appendFile = string path -> array start -> {
	array loop = read(path, 1)
	int samples = size(start) + size(loop)
	array buffer = new(samples)
	int i = 0
	while i < size(start) {
		buffer[i] = start[i]
		i = i + 1
	}
	while i < samples {
		buffer[i] = loop[i - size(start)]
		i = i + 1
	}
	return buffer
}

// Get sample count for a number of bars in a given metric.
lambda barsToSamples = float bpm -> float beats -> float bars -> {
	int val = 44100.0 * bars * beats * 60.0 / bpm
	return val
}

// Stretch the tail bars of a buffer with a given metric and tempo.
lambda stretch = float tail -> float bars -> lambda barsToSamples -> array start -> {
	int offset = barsToSamples(bars)
	int samples = size(start) + offset
	array buffer = new(samples)
	offset = barsToSamples(tail)
	int i = 0
	int j = size(start)
	while i < j {
		buffer[i] = start[i]
		i = i + 1
	}
	while i < samples {
		buffer[i] = buffer[j - offset]
		i = i + 1
		j = j + 1
	}
	return buffer
}

// Mix two audio buffers.
lambda mix = array first -> array second -> {
	int samples = size(first)
	if size(second) < size(first) { samples = size(second) }
	array buffer = new(samples)
	int i = 0
	while i < samples {
		buffer[i] = first[i] + second[i]
		i = i + 1
	}
	return buffer
}