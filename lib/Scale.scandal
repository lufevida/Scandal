// Scale an array by some scalar computed in terms of the array itself.
lambda scale = array x -> lambda f -> {
	float scalar = f(x) // Must declare type.
	int i = 0
	while i < size(x) {
		x[i] = x[i] * scalar
		i = i + 1
	}
	return x
}

// Compute the reciprocal of an (array -> float) lambda.
lambda inverseLambda = array x -> lambda f -> {
	float val = f(x) // Must declare type.
	return 1 / val
}

//import("lib/Max.scale")
//print(inverseLambda([1, 2, 3], max))

// This is a more involved example.
//import("lib/Max.scale")
//lambda inverseMax = array x -> { return inverseLambda(x, max) }
//print(inverseMax([1, 2, 3]))

// We can use `inverseMax` to normalize an array.
// See `lib/Normalize.scandal` for a simpler implementation.
//import("lib/Dump.scale")
//lambda normalizer = array x -> { return scale(x, inverseMax) }
//array normalized = normalizer.dump([1, 2, 3])