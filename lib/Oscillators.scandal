// Get a naive (aliased) waveform into a buffer.
lambda naiveOsc = float dur -> float amp -> float freq -> lambda shape -> {
	int samples = dur * 44100
	array buffer = new(samples)
	float twoPi = 2 * pi
	float frequency = freq * twoPi / 44100
	float phase = 0.0
	int i = 0
	while i < samples {
		buffer[i] = shape(phase)
		buffer[i] = buffer[i] * amp
		phase = phase + frequency
		if phase >= twoPi { phase = phase - twoPi }
		i = i + 1
	}
	return buffer
}

// The following lambdas produce classic waveforms.
lambda naiveCosine = float phase -> cos(phase)

lambda naiveSawtooth = float phase -> 2 * (1 - phase / (2 * pi)) - 1

lambda naiveSquare = float phase -> {
	float val = 1.0
	if phase >= pi { val = -1.0 }
	return val
}

lambda naiveTriangle = float phase -> {
	float val = 1 - phase / pi
	if val < 0.0 { val = -val }
	return 2 * val - 1
}

// Csound's GEN10 subroutine.
lambda GEN10 = array args -> {
	int length = args[0]
	array table = new(length)
	int i = 0
	int j = 1
	while i < length {
		while j < size(args) {
			table[i] = table[i] + args[j] * cos(j * 2 * pi * i / length - pi / 2)
			j = j + 1
		}
		j = 1
		i = i + 1
	}
	return table
}

// A simpler version of Csound's `oscil`.
lambda oscil = float dur -> float amp -> float freq -> float phase -> array table -> {
	int samples = dur * 44100
	array buffer = new(samples)
	float cps = freq * size(table) / 44100.0
	float phi = 1.0 * size(table)
	if phase > 0.0 { phi = phi * phase }
	int i = 0
	while i < samples {
		if phi >= 1.0 * size(table) { phi = phi - size(table) }
		buffer[i] = amp * table[phi]
		phi = phi + cps
		i = i + 1
	}
	return buffer
}